const Submarine=require('Submarine');

const GetServerState=class extends Submarine {
  query(){
    return {
      volume_sizes: String.raw`
        df -P \
         |awk '{print $2}' \
         |grep -v '1024-blocks'
      `,
    };
  }
 
  format(stats){
    return {
      largest_size: (
        Array.isArray(stats.volume_sizes)
          ? stats.volume_sizes
          : [ stats.volume_sizes ]
      ).sort((a, b)=>{
        return b - a;
      })[0] * 1,
    };
  }

  test(stats){
    return {
      size_enough: (4 * 1024 * 1024) < stats.largest_size,
    }; 
  }
}


const Collect=class extends Submarine.collect(
  host => new GetServerState({
    conn: 'ssh',
    host: host,
  }),

  { type: 'gen',
    coll: 'bash',
    cmd: 'echo server{1..5}' },
  { type: 'fil',
    coll: 'func',
    func: hosts => hosts.filter(
      host => host.match(/[2-4]$/)
    ) },
  { type: 'fil',
    coll: 'ping' }

) {
  complex(results){
    const total_size=results.map(
      result => result.stats.largest_size * 1
    ).reduce((a, b)=>{
      return a + b;
    });

    return results.map(
      result => Object.assign({}, result, {
        complex: {
          total_size: total_size,
          total_size_enough: (3 * 4 * 1024 * 1024) < total_size,
        },
      })
    );
  }

}

const collect=new Collect();


collect.check()
  .then(console.log);
