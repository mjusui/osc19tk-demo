'use strict';
const fs=require('fs');
const http=require('http');
const { arrows }=require('cons');
const { Hosts, Tests2 }=require('submarine/test/Classes/Collect');
const Submarine=require('submarine/Class');


const test1=new Hosts();

const server1=test1.communicate({
  html: '/status.html',
});



const test2=new Tests2();

const server2=test2.communicate({
  html: '/failed.html',
});


let cnt=0;
const CacheError=class extends Submarine {
  query(){
    return {
      once: String.raw`
        exit $(( ${cnt++} / 6 ))
      `,
    }
  }
  test(stats){
    return {
      dummy: true,
    };
  }
}

const CacheErrors=Submarine.hosts(
  host => new CacheError({
    conn: 'ssh',
    host: host,
  }),

  '10.10.10.11',
  '10.10.10.12',
  '10.10.10.13',
  '10.10.10.14'
);

const cache_errors=new CacheErrors();

const server3=cache_errors.communicate({
  html: '/cache-error.html',
});



const Error=class extends Submarine {
  query(){
    return {
      err: 'exit 1',
    }
  }
}
const error=new Error({
  conn: 'sh'
});
const server4=error.communicate({
  html: '/error.html',
});
